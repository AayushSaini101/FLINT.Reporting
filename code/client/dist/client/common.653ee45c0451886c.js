"use strict";(self.webpackChunkclient=self.webpackChunkclient||[]).push([[592],{7131:(D,C,o)=>{o.d(C,{F:()=>m});var $=o(4499),_=o(273),d=o(9433),g=o(4522),i=o(8260),a=o(824),T=o(6620),f=o(6263),S=o(6047),p=o(7384),u=o(2835),n=o(2383),E=o(1585);const e="[Covers Types Data Service]",h="api/v1/cover_types",v={"Content-Type":"application/json"};let m=(()=>{class l{constructor(t,s,r,c,M){this.http=t,this.connectivityStatusService=s,this.messageService=r,this.zone=c,this.log=M,this._cache={coversTypes:[]},this._coversTypesSubject$=new $.X([]),this.coversTypes$=this._coversTypesSubject$.asObservable(),this._done$=new _.x,this.bc=new BroadcastChannel("covers-types-data-channel"),this.handleEvent=y=>{this.zone.run(()=>this._coversTypesSubject$.next(y.data.newValue))},this.log.trace(`${e} Subscribing to connectivity status notifications`),this.connectivityStatusService.online$.pipe((0,f.R)(this._done$)).subscribe(y=>{this.log.trace(`${e} Checking if the user is online`),this.log.debug(`${e} User is online = ${y}`),y&&(this.log.trace(`${e} Initializing data`),this.getAllCoversTypes().pipe((0,S.P)()).subscribe(O=>{this.log.trace(`${e} Data initialization complete`)}),this.log.trace(`${e} Unsubscribing from connectivity status notifications`),this._done$.next(!0),this._done$.complete())}),this.bc.onmessage=this.zone.run(()=>this.handleEvent)}createCoverType(t){return this.log.trace(`${e} Entering createCoverType()`),this.log.debug(`${e} Cover Type = ${JSON.stringify(t)}`),this.log.debug(`${e} Making a HTTP POST Request to ${i.N.coversTypesBaseUrl}/${h} to create the record`),this.http.post(`${i.N.coversTypesBaseUrl}/${h}`,JSON.stringify(t),{headers:new g.WM(v)}).pipe((0,p.b)(s=>{this.log.trace(`${e} Record Creation was successful`),this.log.debug(`${e} Created Cover Type record = ${JSON.stringify(s)}`),this.log.trace(`${e} Adding the newly created Cover Type record to the Local Cache`),this._cache.coversTypes.push(s),this.log.trace(`${e} Creating an up to date copy of the Covers Types Records`);const r=Object.assign({},this._cache).coversTypes;this.log.trace(`${e} Broadcasting the up to date copy of the Covers Types Records to the current listener`),this._coversTypesSubject$.next(r),this.log.trace(`${e} Broadcasting the up to date copy of the Covers Types Records to the other listeners`),this.bc.postMessage({newValue:r}),this.log.trace(`${e} Sending a message that states that the Cover Type record Creation was successful`),this.messageService.sendMessage({type:a.C.Success,message:"The Cover Type record Creation was successful"})}),(0,u.K)(s=>(this.log.error(`${e} Cover Type record Creation was unsuccessful: ${s.statusText||"See Server Logs for more details"}`),this.log.trace(`${e} Sending a message that states that the Cover Type record Creation was unsuccessful`),this.messageService.sendMessage({type:a.C.Error,message:"The Cover Type record Creation was unsuccessful"}),(0,d._)(s))))}getAllCoversTypes(t){return this.log.trace(`${e} Entering getAllCoversTypes()`),this.log.debug(`${e} Filters = ${JSON.stringify(t)}`),this.log.debug(`${e} Making a HTTP GET Request to ${i.N.coversTypesBaseUrl}/${h}/all to retrieve the records`),this.http.get(`${i.N.coversTypesBaseUrl}/${h}/all`,{headers:new g.WM(v),params:null==t?{}:t}).pipe((0,p.b)(s=>{this.log.trace(`${e} Covers Types Records Retrieval was successful`),this.log.debug(`${e} Retrieved Covers Types Records = ${JSON.stringify(s)}`),this.log.trace(`${e} Updating the Covers Types Records in the Local Cache to the newly pulled Covers Types Records`),this._cache.coversTypes=s,this.log.trace(`${e} Creating an up to date copy of the Covers Types Records`);const r=Object.assign({},this._cache).coversTypes;this.log.trace(`${e} Broadcasting the up to date copy of the Covers Types Records to the current listener`),this._coversTypesSubject$.next(r),this.log.trace(`${e} Broadcasting the up to date copy of the Covers Types Records to the other listeners`),this.bc.postMessage({newValue:r}),this.log.trace(`${e} Sending a message that states that the Covers Types Records Retrieval was successful`),this.messageService.sendMessage({type:a.C.Success,message:"The Covers Types Records Retrieval was successful"})}),(0,u.K)(s=>(this.log.error(`${e} Covers Types Records Retrieval was unsuccessful: ${s.statusText||"See Server Logs for more details"}`),this.log.trace(`${e} Sending a message that states that the Covers Types Records Retrieval was unsuccessful`),this.messageService.sendMessage({type:a.C.Error,message:"The Covers Types Records Retrieval was unsuccessful"}),(0,d._)(s))))}updateCoverType(t){return this.log.trace(`${e} Entering updateCoverType()`),this.log.debug(`${e} Cover Type = ${JSON.stringify(t)}`),this.log.debug(`${e} Making a HTTP POST Request to ${i.N.coversTypesBaseUrl}/${h} to update the record`),this.http.put(`${i.N.coversTypesBaseUrl}/${h}`,JSON.stringify(t),{headers:new g.WM(v)}).pipe((0,p.b)(s=>{this.log.trace(`${e} Cover Type record Update was successful`),this.log.debug(`${e} Updated Cover Type record = ${JSON.stringify(s)}`),this.log.trace(`${e} Searching for the locally stored Cover Type record`);let r=this._cache.coversTypes.findIndex(c=>c.id===s.id);if(this.log.debug(`${e} Updated Cover Type record Index = ${r}`),-1!=r){this.log.trace(`${e} Updating the locally stored Cover Type record`),this._cache.coversTypes[r]=s,this.log.trace(`${e} Creating an up to date copy of the Covers Types Records`);const c=Object.assign({},this._cache).coversTypes;this.log.trace(`${e} Broadcasting the up to date copy of the Covers Types Records to the current listener`),this._coversTypesSubject$.next(c),this.log.trace(`${e} Broadcasting the up to date copy of the Covers Types Records to the other listeners`),this.bc.postMessage({newValue:c}),this.log.trace(`${e} Sending a message that states that the Cover Type record Update was successful`),this.messageService.sendMessage({type:a.C.Success,message:"The Cover Type record Update was successful"})}else this.log.error(`${e} Local Cache Update was unsuccessful: Cover Type record is missing in the Local Cache`),this.log.trace(`${e} Sending a message that states that the Local Cache Update was unsuccessful`),this.messageService.sendMessage({type:a.C.Error,message:"Covers Types Records Local Cache Update was unsuccessful"})}),(0,u.K)(s=>(this.log.error(`${e} Cover Type record Update was unsuccessful: ${s.statusText||"See Server Logs for more details"}`),this.log.trace(`${e} Sending a message that states that the Cover Type record Update was unsuccessful`),this.messageService.sendMessage({type:a.C.Error,message:"The Cover Type record Update was unsuccessful"}),(0,d._)(s))))}deleteCoverType(t){return this.log.trace(`${e} Entering deleteCoverType()`),this.log.debug(`${e} Cover Type Id = ${t}`),this.log.debug(`${e} Making a HTTP DELETE Request to ${i.N.coversTypesBaseUrl}/${h}/ids/${t} to delete the record`),this.http.delete(`${i.N.coversTypesBaseUrl}/${h}/ids/${t}`,{headers:new g.WM(v)}).pipe((0,p.b)(s=>{if(1==s){this.log.trace(`${e} Cover Type record Deletion was successful`),this.log.trace(`${e} Searching for the deleted Cover Type record in the Local Cache`);let r=this._cache.coversTypes.findIndex(c=>c.id==t);if(this.log.debug(`${e} Deleted Cover Type record Index = ${r}`),-1!=r){this.log.trace(`${e} Removing the deleted Cover Type record from the Local Cache`),this._cache.coversTypes.splice(r,1),this.log.trace(`${e} Creating an up to date copy of the Covers Types Records`);const c=Object.assign({},this._cache).coversTypes;this.log.trace(`${e} Broadcasting the up to date copy of the Covers Types Records to the current listener`),this._coversTypesSubject$.next(c),this.log.trace(`${e} Broadcasting the up to date copy of the Covers Types Records to the other listeners`),this.bc.postMessage({newValue:c}),this.log.trace(`${e} Sending a message that states that the Cover Type record Deletion was successful`),this.messageService.sendMessage({type:a.C.Success,message:"The Cover Type record Deletion was successful"})}else this.log.error(`${e} Local Cache Update was unsuccessful: Cover Type record is missing in the Local Cache`),this.log.trace(`${e} Sending a message that states that the Local Cache Update was unsuccessful`),this.messageService.sendMessage({type:a.C.Error,message:"Covers Types Records Local Cache Update was unsuccessful"})}else this.log.error(`${e} Cover Type record Deletion was unsuccessful: Expecting 1 record to be deleted instead of ${s}`),this.log.trace(`${e} Sending a message that states that the Cover Type record Deletion was unsuccessful`),this.messageService.sendMessage({type:a.C.Error,message:"The Cover Type record Deletion was unsuccessful"})}),(0,u.K)(s=>(this.log.error(`${e} Cover Type record Deletion was unsuccessful: ${s.statusText||"See Server Logs for more details"}`),this.log.trace(`${e} Sending a message that states that the Cover Type record Deletion was unsuccessful`),this.messageService.sendMessage({type:a.C.Error,message:"The Cover Type record Deletion was unsuccessful"}),(0,d._)(s))))}get records(){return this._coversTypesSubject$.value}}return l.\u0275fac=function(t){return new(t||l)(n.LFG(g.eN),n.LFG(T.qZ),n.LFG(T.ez),n.LFG(n.R0b),n.LFG(E.Kf))},l.\u0275prov=n.Yz7({token:l,factory:l.\u0275fac,providedIn:"root"}),l})()}}]);