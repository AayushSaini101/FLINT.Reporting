{"version":3,"sources":["./src/modules/unit-categories/services/unit-categories-data.service.ts","./src/modules/unit-categories/services/index.ts","./src/modules/app-common/models/message.type.model.ts","./src/modules/unit-categories/services/unit-categories-records-tabulation.service.ts"],"names":[],"mappings":"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","file":"default~modules-unit-categories-unit-categories-routing-module~modules-units-units-routing-module-es2015.js","sourcesContent":["import { Injectable, NgZone } from '@angular/core';\nimport { BehaviorSubject, Observable, Subject, throwError } from 'rxjs';\nimport { HttpClient, HttpHeaders } from '@angular/common/http';\nimport { NGXLogger } from 'ngx-logger';\nimport { UnitCategory } from '../models/unit-category.model';\nimport { environment } from 'environments/environment';\nimport { MessageType } from '@common/models/message.type.model';\nimport { ConnectivityStatusService, MessageService } from '@common/services';\nimport { catchError, first, takeUntil, tap } from 'rxjs/operators';\n\nconst LOG_PREFIX: string = \"[Unit Categories Data Service]\";\nconst API_PREFIX: string = \"api/v1/unit_categories\";\nconst HEADERS = { 'Content-Type': 'application/json' };\n\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class UnitCategoriesDataService {\n\n  // The base url of the server\n  private _baseUrl: string = environment.baseUrl;\n\n  // The local data cache\n  private _cache: { unitCategories: UnitCategory[] } = { unitCategories: [] };\n\n  // The observables that allow subscribers to keep tabs of the current status \n  // of unit categories records in the data store\n  private _unitCategoriesSubject$: BehaviorSubject<Array<UnitCategory>> = new BehaviorSubject<Array<UnitCategory>>([]);\n  readonly unitCategories$: Observable<Array<UnitCategory>> = this._unitCategoriesSubject$.asObservable();\n\n  // The observable that we will use to opt out of initialization subscriptions \n  // once we are done with them\n  private _done$ = new Subject<boolean>();\n\n  // The api that we'll use to communicate data store changes when components that \n  // subscribe to this service are outside the current ngzone\n  private bc: BroadcastChannel = new BroadcastChannel(\"unit-categories-data-channel\");\n\n  constructor(\n    private http: HttpClient,\n    private connectivityStatusService: ConnectivityStatusService,\n    private messageService: MessageService,\n    private zone: NgZone,\n    private log: NGXLogger,) {\n\n    // Subscribe to connectivity status notifications\n    this.log.trace(`${LOG_PREFIX} Subscribing to connectivity status notifications`);\n\n    this.connectivityStatusService.online$\n      .pipe(takeUntil(this._done$))\n      .subscribe(online => {\n\n        // Check if the user is online\n        this.log.trace(`${LOG_PREFIX} Checking if the user is online`);\n        this.log.debug(`${LOG_PREFIX} User is online = ${online}`);\n\n        if (online) {\n\n          // Initialize data\n          this.log.trace(`${LOG_PREFIX} Initializing data`);\n\n          this.getAllUnitCategories()\n            .pipe(first()) // This will automatically complete (and therefore unsubscribe) after the first value has been emitted.\n            .subscribe((response => {\n\n              // Data initialization complete\n              this.log.trace(`${LOG_PREFIX} Data initialization complete`);\n\n            }));\n\n          // Unsubscribe from connectivity status notifications\n          this.log.trace(`${LOG_PREFIX} Unsubscribing from connectivity status notifications`);\n          this._done$.next();\n          this._done$.complete();\n\n        }\n\n      });\n\n    //Note: \"bc.onmessage\" isn't invoked on sender ui\n    this.bc.onmessage = this.zone.run(() => this.handleEvent);\n  }\n\n\n  /**\n   * Publish information to current (listening) ui\n   * @param event \n   */\n   private handleEvent = (event: MessageEvent) => {\n    this.zone.run(() => this._unitCategoriesSubject$.next(event.data.newValue));\n  }\n    \n\n  /**\n   * Creates and adds an instance of a new Unit Category record to the local cache and then broadcasts the changes to all subscribers\n   * \n   * @param unitCategory The details of the Unit Category record to be created - with the id and version details missing\n   */\n  public createUnitCategory(unitCategory: UnitCategory): Observable<UnitCategory> {\n\n    this.log.trace(`${LOG_PREFIX} Entering createUnitCategory()`);\n    this.log.debug(`${LOG_PREFIX} UnitCategory = ${JSON.stringify(unitCategory)}`);\n\n    // Make a HTTP POST Request to create the record\n    this.log.debug(`${LOG_PREFIX} Making a HTTP POST Request to ${this._baseUrl}/${API_PREFIX} to create the record`);\n\n    return this.http.post<UnitCategory>(`${this._baseUrl}/${API_PREFIX}`, JSON.stringify(unitCategory), { headers: new HttpHeaders(HEADERS) })\n      .pipe(\n\n        tap((data: UnitCategory) => {\n\n          // Unit Category record Creation was successful\n          this.log.trace(`${LOG_PREFIX} Record Creation was successful`);\n          this.log.debug(`${LOG_PREFIX} Created Unit Category record = ${JSON.stringify(data)}`);\n\n          // Add the newly created Unit Category record to the Local Cache\n          this.log.trace(`${LOG_PREFIX} Adding the newly created Unit Category record to the Local Cache`);\n          this._cache.unitCategories.push(data);\n\n          // Create an up to date copy of the Unit Categories records\n          this.log.trace(`${LOG_PREFIX} Creating an up to date copy of the Unit Categories records`);\n          const copy = Object.assign({}, this._cache).unitCategories;\n\n          // Broadcast the up to date copy of the Unit Categories records to the current listener\n          this.log.trace(`${LOG_PREFIX} Broadcasting the up to date copy of the Unit Categories records to the current listener`);\n          this._unitCategoriesSubject$.next(copy);\n\n          // Broadcast the up to date copy of the Unit Categories records to the other listeners\n          this.log.trace(`${LOG_PREFIX} Broadcasting the up to date copy of the Unit Categories records to the other listeners`);\n          this.bc.postMessage({ newValue: copy });\n\n          // Send a message that states that the Unit Category record Creation was successful\n          this.log.trace(`${LOG_PREFIX} Sending a message that states that the Unit Category record Creation was successful`);\n          this.messageService.sendMessage({ \"type\": MessageType.Success, \"message\": \"The Unit Category record Creation was successful\" });\n\n        }),\n\n        catchError((error: any) => {\n\n          // Unit Category record Creation was unsuccessful\n          this.log.error(`${LOG_PREFIX} Unit Category record Creation was unsuccessful: ${error.statusText || \"See Server Logs for more details\"}`);\n\n          // Send a message that states that the Unit Category record Creation was unsuccessful\n          this.log.trace(`${LOG_PREFIX} Sending a message that states that the Unit Category record Creation was unsuccessful`);\n          this.messageService.sendMessage({ \"type\": MessageType.Error, \"message\": \"The Unit Category record Creation was unsuccessful\" });\n\n          return throwError(error);\n        }));\n  }\n\n\n  /**\n   * Retrieves and adds a single Unit Category record to the local cache and then broadcasts the changes to all subscribers\n   * \n   * @param unitCategoryId The Unique Identifier of the Unit Category record\n   */\n  getUnitCategory(unitCategoryId: number): Observable<UnitCategory> {\n\n    this.log.trace(`${LOG_PREFIX} Entering getUnitCategory()`);\n    this.log.debug(`${LOG_PREFIX} UnitCategory Id = ${unitCategoryId}`);\n\n    // Make a HTTP GET Request to retrieve the record\n    this.log.debug(`${LOG_PREFIX} Making a HTTP GET Request to ${this._baseUrl}/${API_PREFIX}/ids/${unitCategoryId} to retrieve the record`);\n\n    return this.http.get<UnitCategory>(`${this._baseUrl}/${API_PREFIX}/ids/${unitCategoryId}`, { headers: new HttpHeaders(HEADERS) })\n      .pipe(\n\n        tap((data: UnitCategory) => {\n\n          // Unit Category record Retrieval was successful\n          this.log.trace(`${LOG_PREFIX} Unit Category record Retrieval was successful`);\n          this.log.debug(`${LOG_PREFIX} Retrieved Unit Category record = ${JSON.stringify(data)}`);\n\n          // Search for the Unit Category record in the Local Cache and return its index\n          this.log.trace(`${LOG_PREFIX} Searching for the Unit Category record in the Local Cache and returning its index`);\n          let index = this._cache.unitCategories.findIndex(d => d.id === data.id);\n          this.log.debug(`${LOG_PREFIX} Unit Category record Index = ${index}`);\n\n          // If the record was found (index != -1), update it, else, add it to the Local Storage\n          if (index != -1) {\n\n            // The Unit Category record was found in the Local Cache\n            this.log.trace(`${LOG_PREFIX} The Unit Category record was found in the Local Cache`);\n\n            // Update the local Unit Category record\n            this.log.trace(`${LOG_PREFIX} Updating the local Unit Category record`);\n            this._cache.unitCategories[index] = data;\n\n          } else {\n\n            // The Unit Category record was not found in the Local Cache\n            this.log.trace(`${LOG_PREFIX} The Unit Category record was not found in the Local Cache`);\n\n            // Add the Unit Category record to the Local Cache\n            this.log.trace(`${LOG_PREFIX} Adding the Unit Category record to the Local Cache`);\n            this._cache.unitCategories.push(data);\n          }\n\n          // Create an up to date copy of the Unit Categories records\n          this.log.trace(`${LOG_PREFIX} Creating an up to date copy of the Unit Categories records`);\n          const copy = Object.assign({}, this._cache).unitCategories;\n\n          // Broadcast the up to date copy of the Unit Categories records to the current listener\n          this.log.trace(`${LOG_PREFIX} Broadcasting the up to date copy of the Unit Categories records to the current listener`);\n          this._unitCategoriesSubject$.next(copy);\n\n          // Broadcast the up to date copy of the Unit Categories records to the other listeners\n          this.log.trace(`${LOG_PREFIX} Broadcasting the up to date copy of the Unit Categories records to the other listeners`);\n          this.bc.postMessage({ newValue: copy });\n\n          // Send a message that states that the Unit Category record Retrieval was successful\n          this.log.trace(`${LOG_PREFIX} Sending a message that states that the Unit Category record Retrieval was successful`);\n          this.messageService.sendMessage({ \"type\": MessageType.Success, \"message\": \"The Unit Category record Retrieval was successful\" });\n\n        }),\n\n        catchError((error: any) => {\n\n          // Unit Category record Retrieval was unsuccessful\n          this.log.error(`${LOG_PREFIX} Unit Category record Retrieval was unsuccessful: ${error.statusText || \"See Server Logs for more details\"}`);\n\n          // Send a message that states that the Unit Category record Retrieval was unsuccessful\n          this.log.trace(`${LOG_PREFIX} Sending a message that states that the Unit Category record Retrieval was unsuccessful`);\n          this.messageService.sendMessage({ \"type\": MessageType.Error, \"message\": \"The Unit Category record Retrieval was unsuccessful\" });\n\n          return throwError(error);\n        }));\n  }\n\n\n  /**\n   * Retrieves and adds all or a subset of all Unit Categories records to the local cache and then broadcasts the changes to all subscribers\n   * \n   * @param filters Optional query parameters used in filtering the retrieved records\n   */\n  getAllUnitCategories(filters?: any): Observable<UnitCategory[]> {\n\n    this.log.trace(`${LOG_PREFIX} Entering getAllUnitCategories()`);\n    this.log.debug(`${LOG_PREFIX} Filters = ${JSON.stringify(filters)}`);\n\n    // Make a HTTP GET Request to retrieve the records\n    this.log.debug(`${LOG_PREFIX} Making a HTTP GET Request to ${this._baseUrl}/${API_PREFIX}/all to retrieve the records`);\n\n    return this.http.get<UnitCategory[]>(`${this._baseUrl}/${API_PREFIX}/all`, { headers: new HttpHeaders(HEADERS), params: filters == null ? {} : filters })\n      .pipe(\n\n        tap((data: UnitCategory[]) => {\n\n          // Unit Categories records Retrieval was successful\n          this.log.trace(`${LOG_PREFIX} Unit Categories records Retrieval was successful`);\n          this.log.debug(`${LOG_PREFIX} Retrieved Unit Categories records = ${JSON.stringify(data)}`);\n\n          // Update the Unit Categories records in the Local Cache to the newly pulled Unit Categories records\n          this.log.trace(`${LOG_PREFIX} Updating the Unit Categories records in the Local Cache to the newly pulled Unit Categories records`);\n          this._cache.unitCategories = data;\n\n          // Create an up to date copy of the Unit Categories records\n          this.log.trace(`${LOG_PREFIX} Creating an up to date copy of the Unit Categories records`);\n          const copy = Object.assign({}, this._cache).unitCategories;\n\n          // Broadcast the up to date copy of the Unit Categories records to the current listener\n          this.log.trace(`${LOG_PREFIX} Broadcasting the up to date copy of the Unit Categories records to the current listener`);\n          this._unitCategoriesSubject$.next(copy);\n\n          // Broadcast the up to date copy of the Unit Categories records to the other listeners\n          this.log.trace(`${LOG_PREFIX} Broadcasting the up to date copy of the Unit Categories records to the other listeners`);\n          this.bc.postMessage({ newValue: copy });\n\n          // Send a message that states that the Unit Categories records Retrieval was successful\n          this.log.trace(`${LOG_PREFIX} Sending a message that states that the Unit Categories records Retrieval was successful`);\n          this.messageService.sendMessage({ \"type\": MessageType.Success, \"message\": \"The Unit Categories records Retrieval was successful\" });\n\n        }),\n\n        catchError((error: any) => {\n\n          // Unit Categories records Retrieval was unsuccessful\n          this.log.error(`${LOG_PREFIX} Unit Categories records Retrieval was unsuccessful: ${error.statusText || \"See Server Logs for more details\"}`);\n\n          // Send a message that states that the Unit Categories records Retrieval was unsuccessful\n          this.log.trace(`${LOG_PREFIX} Sending a message that states that the Unit Categories records Retrieval was unsuccessful`);\n          this.messageService.sendMessage({ \"type\": MessageType.Error, \"message\": \"The Unit Categories records Retrieval was unsuccessful\" });\n\n          return throwError(error);\n        }));\n  }\n\n\n  /**\n   * Updates a single Unit Category record and its corresponding counterpart in the local cache and then broadcasts the changes to all subscribers\n   * \n   * @param unitCategory The details of the Unit Category record to be updated\n   */\n  updateUnitCategory(unitCategory: UnitCategory): Observable<UnitCategory> {\n\n    this.log.trace(`${LOG_PREFIX} Entering updateUnitCategory()`);\n    this.log.debug(`${LOG_PREFIX} UnitCategory = ${JSON.stringify(unitCategory)}`);\n\n    // Make a HTTP POST Request to retrieve the records\n    this.log.debug(`${LOG_PREFIX} Making a HTTP POST Request to ${this._baseUrl}/${API_PREFIX} to update the record`);\n\n    return this.http.put<UnitCategory>(`${this._baseUrl}/${API_PREFIX}`, JSON.stringify(unitCategory), { headers: new HttpHeaders(HEADERS) })\n      .pipe(\n\n        tap((data: UnitCategory) => {\n\n          // Unit Category record Update was successful\n          this.log.trace(`${LOG_PREFIX} Unit Category record Update was successful`);\n          this.log.debug(`${LOG_PREFIX} Updated Unit Category record = ${JSON.stringify(data)}`);\n\n          // Search for the locally stored Unit Category record\n          this.log.trace(`${LOG_PREFIX} Searching for the locally stored Unit Category record`);\n          let index = this._cache.unitCategories.findIndex(d => d.id === data.id);\n          this.log.debug(`${LOG_PREFIX} Updated Unit Category record Index = ${index}`);\n\n          // If the record was found (index != -1), update it in the Local Cache\n          if (index != -1) {\n\n            // Update the local Unit Category record\n            this.log.trace(`${LOG_PREFIX} Updating the locally stored Unit Category record`);\n            this._cache.unitCategories[index] = data;\n\n            // Create an up to date copy of the Unit Categories records\n            this.log.trace(`${LOG_PREFIX} Creating an up to date copy of the Unit Categories records`);\n            const copy = Object.assign({}, this._cache).unitCategories;\n\n            // Broadcast the up to date copy of the Unit Categories records to the current listener\n            this.log.trace(`${LOG_PREFIX} Broadcasting the up to date copy of the Unit Categories records to the current listener`);\n            this._unitCategoriesSubject$.next(copy);\n\n            // Broadcast the up to date copy of the Unit Categories records to the other listeners\n            this.log.trace(`${LOG_PREFIX} Broadcasting the up to date copy of the Unit Categories records to the other listeners`);\n            this.bc.postMessage({ newValue: copy });\n\n            // Send a message that states that the Unit Category record Update was successful\n            this.log.trace(`${LOG_PREFIX} Sending a message that states that the Unit Category record Update was successful`);\n            this.messageService.sendMessage({ \"type\": MessageType.Success, \"message\": \"The Unit Category record Update was successful\" });\n\n          } else {\n\n            // Local Cache Update was unsuccessful\n            this.log.error(`${LOG_PREFIX} Local Cache Update was unsuccessful: Unit Category record is missing in the Local Cache`);\n\n            // Send a message that states that the Local Cache Update was unsuccessful\n            this.log.trace(`${LOG_PREFIX} Sending a message that states that the Local Cache Update was unsuccessful`);\n            this.messageService.sendMessage({ \"type\": MessageType.Error, \"message\": \"Unit Categories records Local Cache Update was unsuccessful\" });\n          }\n\n        }),\n\n        catchError((error: any) => {\n\n          // Unit Category record Update was unsuccessful\n          this.log.error(`${LOG_PREFIX} Unit Category record Update was unsuccessful: ${error.statusText || \"See Server Logs for more details\"}`);\n\n          // Send a message that states that the Unit Category record Update was unsuccessful\n          this.log.trace(`${LOG_PREFIX} Sending a message that states that the Unit Category record Update was unsuccessful`);\n          this.messageService.sendMessage({ \"type\": MessageType.Error, \"message\": \"The Unit Category record Update was unsuccessful\" });\n\n          return throwError(error);\n\n        }));\n  }\n\n\n  /**\n   * Deletes a single Unit Category record and its corresponding counterpart in the local cache and then broadcasts the changes to all subscribers\n   *\n   * @param unitCategoryId The Unique Identifier of the record\n   * @returns The total count of deleted records - which should be 1 in this case if the delete operation was successful\n   */\n  deleteUnitCategory(unitCategoryId: number): Observable<number> {\n\n    this.log.trace(`${LOG_PREFIX} Entering deleteUnitCategory()`);\n    this.log.debug(`${LOG_PREFIX} UnitCategory Id = ${unitCategoryId}`);\n\n    // Make a HTTP DELETE Request to retrieve the records\n    this.log.debug(`${LOG_PREFIX} Making a HTTP DELETE Request to ${this._baseUrl}/${API_PREFIX}/ids/${unitCategoryId} to delete the record`);\n\n    return this.http.delete<number>(`${this._baseUrl}/${API_PREFIX}/ids/${unitCategoryId}`, { headers: new HttpHeaders(HEADERS) })\n      .pipe(\n\n        tap((count: number) => {\n\n          // Mark the deletion successful if and only if exactly 1 record was deleted\n          if (count == 1) {\n\n            // Unit Category record Deletion was successful\n            this.log.trace(`${LOG_PREFIX} Unit Category record Deletion was successful`);\n\n            // Search for the deleted Unit Category record in the Local Cache\n            this.log.trace(`${LOG_PREFIX} Searching for the deleted Unit Category record in the Local Cache`);\n            let index = this._cache.unitCategories.findIndex(d => d.id == unitCategoryId);\n            this.log.debug(`${LOG_PREFIX} Deleted Unit Category record Index = ${index}`);\n\n            // If the record was found (index != -1), remove it from the Local Cache\n            if (index != -1) {\n\n              // Remove the deleted Unit Category record from the Local Cache\n              this.log.trace(`${LOG_PREFIX} Removing the deleted Unit Category record from the Local Cache`);\n              this._cache.unitCategories.splice(index, 1);\n\n              // Create an up to date copy of the Unit Categories records\n              this.log.trace(`${LOG_PREFIX} Creating an up to date copy of the Unit Categories records`);\n              const copy = Object.assign({}, this._cache).unitCategories;\n\n              // Broadcast the up to date copy of the Unit Categories records to the current listener\n              this.log.trace(`${LOG_PREFIX} Broadcasting the up to date copy of the Unit Categories records to the current listener`);\n              this._unitCategoriesSubject$.next(copy);\n\n              // Broadcast the up to date copy of the Unit Categories records to the other listeners\n              this.log.trace(`${LOG_PREFIX} Broadcasting the up to date copy of the Unit Categories records to the other listeners`);\n              this.bc.postMessage({ newValue: copy });\n\n              // Send a message that states that the Unit Category record Deletion was successful\n              this.log.trace(`${LOG_PREFIX} Sending a message that states that the Unit Category record Deletion was successful`);\n              this.messageService.sendMessage({ \"type\": MessageType.Success, \"message\": \"The Unit Category record Deletion was successful\" });\n\n            } else {\n\n              // Local Cache Update was unsuccessful\n              this.log.error(`${LOG_PREFIX} Local Cache Update was unsuccessful: Unit Category record is missing in the Local Cache`);\n\n              // Send a message that states that the Local Cache Update was unsuccessful\n              this.log.trace(`${LOG_PREFIX} Sending a message that states that the Local Cache Update was unsuccessful`);\n              this.messageService.sendMessage({ \"type\": MessageType.Error, \"message\": \"Unit Categories records Local Cache Update was unsuccessful\" });\n            }\n          } else {\n\n            // Unit Category record Deletion was unsuccessful\n            this.log.error(`${LOG_PREFIX} Unit Category record Deletion was unsuccessful: Expecting 1 record to be deleted instead of ${count}`);\n\n            // Send a message that states that the Unit Category record Deletion was unsuccessful\n            this.log.trace(`${LOG_PREFIX} Sending a message that states that the Unit Category record Deletion was unsuccessful`);\n            this.messageService.sendMessage({ \"type\": MessageType.Error, \"message\": \"The Unit Category record Deletion was unsuccessful\" });\n\n          }\n\n\n        }),\n\n        catchError((error: any) => {\n\n          // Unit Category record Deletion was unsuccessful\n          this.log.error(`${LOG_PREFIX} Unit Category record Deletion was unsuccessful: ${error.statusText || \"See Server Logs for more details\"}`);\n\n          // Send a message that states that the Unit Category record Deletion was unsuccessful\n          this.log.trace(`${LOG_PREFIX} Sending a message that states that the Unit Category record Deletion was unsuccessful`);\n          this.messageService.sendMessage({ \"type\": MessageType.Error, \"message\": \"The Unit Category record Deletion was unsuccessful\" });\n\n          return throwError(error);\n        }));\n  }\n\n\n  /**\n   * Use BehaviorSubject's getter property named value to get the most recent value passed through it.\n   */\n  public get records() {\n    return this._unitCategoriesSubject$.value;\n  }\n}\n","\nimport { UnitCategoriesDataService } from './unit-categories-data.service';\nimport { UnitCategoriesRecordsTabulationService } from './unit-categories-records-tabulation.service';\n\nexport const services = [UnitCategoriesDataService, UnitCategoriesRecordsTabulationService];\n\n\nexport * from './unit-categories-data.service';\nexport * from './unit-categories-records-tabulation.service';\n","export enum MessageType {\n    Success,\n    Error,\n    Info,\n    Warning\n}","import { Injectable, OnDestroy, OnInit } from '@angular/core';\nimport { UnitCategoriesDataService } from './unit-categories-data.service';\nimport { NGXLogger } from 'ngx-logger';\nimport { BehaviorSubject, Subscription } from 'rxjs';\nimport { State } from '@common/models';\nimport { SortDirection } from '@common/directives/sortable.directive';\nimport { UnitCategory } from '../models/unit-category.model';\n\nconst LOG_PREFIX: string = \"[Unit Categories Records Tabulation Service]\";\n\n@Injectable({ providedIn: 'root' })\nexport class UnitCategoriesRecordsTabulationService implements OnDestroy {\n\n    // The observables that will be updated / broadcasted whenever \n    // a background task is started and completed  \n    private _loadingSubject$ = new BehaviorSubject<boolean>(true);\n    private _loading$ = this._loadingSubject$.asObservable();\n\n    // The first set of observables that will be updated / broadcasted whenever \n    // Unit Categories records are transformed as per the user defined search \n    // or sort criteria    \n    private _unitCategoriesSubject$ = new BehaviorSubject<UnitCategory[]>([]);\n    private _unitCategories$ = this._unitCategoriesSubject$.asObservable();\n\n    // The second set of observables that will be updated / broadcasted whenever \n    // Unit Categories records are transformed as per the user defined search \n    // or sort criteria\n    private _totalSubject$ = new BehaviorSubject<number>(0);\n    private _total$ = this._totalSubject$.asObservable();\n\n    // The user defined search or sort criteria.\n    // Determines which & how many Unit Categories records should be displayed\n    private _state: State = { page: 1, pageSize: 4, searchTerm: '', sortColumn: '', sortDirection: '' };\n\n    // A common gathering point for all the component's subscriptions.\n    // Makes it easier to unsubscribe from all subscriptions when the component is destroyed.   \n    private _subscriptions: Subscription[] = [];\n\n    constructor(\n        private unitCategoriesDataService: UnitCategoriesDataService,\n        private log: NGXLogger) {\n\n        this._subscriptions.push(\n            this.unitCategoriesDataService.unitCategories$\n                .subscribe(\n                    (unitCategories: UnitCategory[]) => {\n                        this._transform(unitCategories);\n                    }));\n\n    }\n\n  ngOnDestroy() {\n        this._subscriptions.forEach((s) => s.unsubscribe());\n    }\n\n    /**\n     * Returns an observable containing Unit Categories records that have been filtered as per the user defined criteria\n     */\n    get unitCategories$() {\n        this.log.trace(`${LOG_PREFIX} Getting unitCategories$ observable`);\n        this.log.debug(`${LOG_PREFIX} Current unitCategories$ observable value = ${JSON.stringify(this._unitCategoriesSubject$.value)}`);\n        return this._unitCategories$;\n    }\n\n\n    /**\n     * Returns an observable containing the total number of Unit Categories records that have been filtered as per the user defined criteria\n     */\n    get total$() {\n        this.log.trace(`${LOG_PREFIX} Getting total$ observable`);\n        this.log.debug(`${LOG_PREFIX} Current total$ observable value = ${JSON.stringify(this._totalSubject$.value)}`);\n        return this._total$;\n    }\n\n\n    /**\n     * Returns an observable containing a boolean flag that indicates whether or not a data operation exercise (sorting, searching etc.) is currently underway\n     */\n    get loading$() {\n        this.log.trace(`${LOG_PREFIX} Getting loading$ observable`);\n        this.log.debug(`${LOG_PREFIX} Current loading$ observable value = ${JSON.stringify(this._loadingSubject$.value)}`);\n        return this._loading$;\n    }\n\n\n    /**\n     * Returns the currently active page\n     */\n    get page() {\n        this.log.trace(`${LOG_PREFIX} Getting page detail`);\n        this.log.debug(`${LOG_PREFIX} Current page detail value = ${JSON.stringify(this._state.page)}`);\n        return this._state.page;\n    }\n\n\n    /**\n     * Updates the currently active page detail and then triggers data transformation\n     */\n    set page(page: number) {\n        this.log.trace(`${LOG_PREFIX} Setting page detail to ${JSON.stringify(page)}`);\n        this._set({ page });\n    }\n\n\n    /**\n     * Returns the currently set page size\n     */\n    get pageSize() {\n        this.log.trace(`${LOG_PREFIX} Getting page size detail`);\n        this.log.debug(`${LOG_PREFIX} Current page size detail = ${JSON.stringify(this._state.pageSize)}`);\n        return this._state.pageSize;\n    }\n\n\n    /**\n     * Updates the desired page size detail and then triggers data transformation\n     */\n    set pageSize(pageSize: number) {\n        this.log.debug(`${LOG_PREFIX} Setting page size to ${JSON.stringify(pageSize)}`);\n        this._set({ pageSize });\n    }\n\n\n    /**\n     * Gets the currently entered search term\n     */\n    get searchTerm() {\n        this.log.debug(`${LOG_PREFIX} Getting search term detail`);\n        this.log.debug(`${LOG_PREFIX} Current search term detail = ${JSON.stringify(this._state.searchTerm)}`);\n        return this._state.searchTerm;\n    }\n\n\n    /**\n     * Updates the search term detail and then triggers data transformation\n     */\n    set searchTerm(searchTerm: string) {\n        this.log.debug(`${LOG_PREFIX} Setting search term to ${JSON.stringify(searchTerm)}`);\n        this._set({ searchTerm });\n    }\n\n\n    /**\n     * Updates the sort column detail and then triggers data transformation\n     */\n    set sortColumn(sortColumn: string) {\n        this.log.debug(`${LOG_PREFIX} Setting sort column to ${JSON.stringify(sortColumn)}`);\n        this._set({ sortColumn });\n    }\n\n\n    /**\n     * Updates the sort direction detail and then triggers data transformation\n     */\n    set sortDirection(sortDirection: SortDirection) {\n        this.log.debug(`${LOG_PREFIX} Setting sort direction to ${JSON.stringify(sortDirection)}`);\n        this._set({ sortDirection });\n    }\n\n\n    /**\n     * Utility method for all the class setters.\n     * Does the actual updating of details / transforming of data\n     * @param patch the partially updated details\n     */\n    private _set(patch: Partial<State>) {\n\n        // Update the state\n        Object.assign(this._state, patch);\n\n\n        // Transform the Unit Categories records\n        this._transform(this.unitCategoriesDataService.records);\n\n    }\n\n\n    /**\n     * Compares two values to find out if the first value preceeds the second.\n     * When comparing string values, please note that this method is case sensitive\n     * \n     * @param v1 The first value\n     * @param v2 The second value\n     * @returns -1 if v1 preceeds v2, 0 if v1 is equal to v2 or 1 if v1 is greater than v2\n     */\n    compare(v1: number | string | undefined | null, v2: number | string | undefined | null) {\n        this.log.trace(`${LOG_PREFIX} Comparing two values to find out if the first value preceeds the second`);\n        return (v1 == undefined || v1 == null || v2 == undefined || v2 == null) ? 0 : v1 < v2 ? -1 : v1 > v2 ? 1 : 0;\n    }\n\n\n    /**\n     * Sorts Unit Categories Records\n     * \n     * @param unitCategories The Unit Categories records to sort\n     * @param column The table column to sort the records by \n     * @param direction The desired sort direction - ascending or descending\n     * @returns The sorted Unit Categories records\n     */\n    sort(unitCategories: UnitCategory[], column: string, direction: string): UnitCategory[] {\n        this.log.trace(`${LOG_PREFIX} Sorting Unit Categories records`);\n        if (direction === '' || column == null) {\n            return unitCategories;\n        } else {\n            return [...unitCategories].sort((a, b) => {\n                const res = this.compare(a[column], b[column]);\n                return direction === 'asc' ? res : -res;\n            });\n        }\n    }\n\n\n    /**\n     * Checks if search string is present in Unit Category record\n     * \n     * @param unitCategory The Unit Category record\n     * @param term The Search String\n     * @returns A boolean result indicating whether or not a match was found\n     */\n    matches(unitCategory: UnitCategory, term: string): boolean {\n        this.log.trace(`${LOG_PREFIX} Checking if search string is present in Unit Category record`);\n        if (unitCategory != null && unitCategory != undefined) {\n\n            // Try locating the search string in the Unit Category's name\n            if (unitCategory.name != null && unitCategory.name != undefined) {\n                if (unitCategory.name.toLowerCase().includes(term.toLowerCase())) {\n                    return true;\n                }\n            }\n        }\n\n        return false;\n    }\n\n\n    /**\n     * Paginates Unit Categories Records\n     * \n     * @param unitCategories The Unit Categories records to paginate\n     * @returns The paginated Unit Categories records\n     */\n    paginate(unitCategories: UnitCategory[], page: number, pageSize: number): UnitCategory[] {\n        this.log.trace(`${LOG_PREFIX} Paginating Unit Categories records`);\n        return unitCategories.slice((page - 1) * pageSize, (page - 1) * pageSize + pageSize);\n    }\n\n    /**\n     * Updates the index of the Unit Categories Records\n     * \n     * @param unitCategories The Unit Categories records to sort\n     * @returns The newly indexed Unit Categories records\n     */\n    index(unitCategories: UnitCategory[]): UnitCategory[] {\n        this.log.trace(`${LOG_PREFIX} Indexing Unit Categories records`);\n        let pos: number = 0;\n        return unitCategories.map(d => {\n            d.pos = ++pos;\n            return d;\n        });\n    }\n\n\n    /**\n     * Sorts, filters and paginates Unit Categories records\n     * \n     * @param records the original Unit Categories records\n     */\n    private _transform(records: UnitCategory[]) {\n\n        // Flag\n        this._loadingSubject$.next(true);\n\n        if (records.length != 0) {\n\n            this.log.trace(`${LOG_PREFIX} Sorting, filtering and paginating Unit Categories records`);\n\n            const { sortColumn, sortDirection, pageSize, page, searchTerm } = this._state;\n\n            // Sort\n            let transformed: UnitCategory[] = this.sort(records, sortColumn, sortDirection);\n\n            // Filter\n            transformed = transformed.filter(unitCategory => this.matches(unitCategory, searchTerm));\n            const total: number = transformed.length;\n\n            // Index\n            transformed = this.index(transformed);\n\n            // Paginate\n            transformed = this.paginate(transformed, page, pageSize);\n\n            // Broadcast\n            this._unitCategoriesSubject$.next(transformed);\n            this._totalSubject$.next(total);\n\n        } else {\n\n            // Broadcast\n            this._unitCategoriesSubject$.next([]);\n            this._totalSubject$.next(0);\n        }\n\n        // Flag\n        this._loadingSubject$.next(false);\n\n    }\n\n}\n"],"sourceRoot":"webpack:///"}