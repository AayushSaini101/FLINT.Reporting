"use strict";(self.webpackChunkclient=self.webpackChunkclient||[]).push([[801],{8189:(m,u,s)=>{s.d(u,{o:()=>v});var y=s(4499),E=s(273),d=s(9433),h=s(4522),o=s(8260),i=s(824),c=s(6620),_=s(6263),S=s(6047),T=s(7384),P=s(2835),p=s(2383),R=s(1585);const e="[Parties Types Data Service]",l="api/v1/party_types",$={"Content-Type":"application/json"};let v=(()=>{class g{constructor(a,t,r,n,C){this.http=a,this.connectivityStatusService=t,this.messageService=r,this.zone=n,this.log=C,this._cache={partiesTypes:[]},this._partiesTypesSubject$=new y.X([]),this.partiesTypes$=this._partiesTypesSubject$.asObservable(),this._done$=new E.x,this.bc=new BroadcastChannel("parties-types-data-channel"),this.handleEvent=f=>{this.zone.run(()=>this._partiesTypesSubject$.next(f.data.newValue))},this.log.trace(`${e} Subscribing to connectivity status notifications`),this.connectivityStatusService.online$.pipe((0,_.R)(this._done$)).subscribe(f=>{this.log.trace(`${e} Checking if the user is online`),this.log.debug(`${e} User is online = ${f}`),f&&(this.log.trace(`${e} Initializing data`),this.getAllPartiesTypes().pipe((0,S.P)()).subscribe(O=>{this.log.trace(`${e} Data initialization complete`)}),this.log.trace(`${e} Unsubscribing from connectivity status notifications`),this._done$.next(!0),this._done$.complete())}),this.bc.onmessage=this.zone.run(()=>this.handleEvent)}createPartyType(a){return this.log.trace(`${e} Entering createPartyType()`),this.log.debug(`${e} PartyType = ${JSON.stringify(a)}`),this.log.debug(`${e} Making a HTTP POST Request to ${o.N.partiesTypesBaseUrl}/${l} to create the record`),this.http.post(`${o.N.partiesTypesBaseUrl}/${l}`,JSON.stringify(a),{headers:new h.WM($)}).pipe((0,T.b)(t=>{this.log.trace(`${e} Record Creation was successful`),this.log.debug(`${e} Created PartyType record = ${JSON.stringify(t)}`),this.log.trace(`${e} Adding the newly created PartyType record to the Local Cache`),this._cache.partiesTypes.push(t),this.log.trace(`${e} Creating an up to date copy of the Parties Types Records`);const r=Object.assign({},this._cache).partiesTypes;this.log.trace(`${e} Broadcasting the up to date copy of the Parties Types Records to the current listener`),this._partiesTypesSubject$.next(r),this.log.trace(`${e} Broadcasting the up to date copy of the Parties Types Records to the other listeners`),this.bc.postMessage({newValue:r}),this.log.trace(`${e} Sending a message that states that the PartyType record Creation was successful`),this.messageService.sendMessage({type:i.C.Success,message:"The PartyType record Creation was successful"})}),(0,P.K)(t=>(this.log.error(`${e} PartyType record Creation was unsuccessful: ${t.statusText||"See Server Logs for more details"}`),this.log.trace(`${e} Sending a message that states that the PartyType record Creation was unsuccessful`),this.messageService.sendMessage({type:i.C.Error,message:"The PartyType record Creation was unsuccessful"}),(0,d._)(t))))}getAllPartiesTypes(a){return this.log.trace(`${e} Entering getAllPartiesTypes()`),this.log.debug(`${e} Filters = ${JSON.stringify(a)}`),this.log.debug(`${e} Making a HTTP GET Request to ${o.N.partiesTypesBaseUrl}/${l}/all to retrieve the records`),this.http.get(`${o.N.partiesTypesBaseUrl}/${l}/all`,{headers:new h.WM($),params:null==a?{}:a}).pipe((0,T.b)(t=>{this.log.trace(`${e} Parties Types Records Retrieval was successful`),this.log.debug(`${e} Retrieved Parties Types Records = ${JSON.stringify(t)}`),this.log.trace(`${e} Updating the Parties Types Records in the Local Cache to the newly pulled Parties Types Records`),this._cache.partiesTypes=t,this.log.trace(`${e} Creating an up to date copy of the Parties Types Records`);const r=Object.assign({},this._cache).partiesTypes;this.log.trace(`${e} Broadcasting the up to date copy of the Parties Types Records to the current listener`),this._partiesTypesSubject$.next(r),this.log.trace(`${e} Broadcasting the up to date copy of the Parties Types Records to the other listeners`),this.bc.postMessage({newValue:r}),this.log.trace(`${e} Sending a message that states that the Parties Types Records Retrieval was successful`),this.messageService.sendMessage({type:i.C.Success,message:"The Parties Types Records Retrieval was successful"})}),(0,P.K)(t=>(this.log.error(`${e} Parties Types Records Retrieval was unsuccessful: ${t.statusText||"See Server Logs for more details"}`),this.log.trace(`${e} Sending a message that states that the Parties Types Records Retrieval was unsuccessful`),this.messageService.sendMessage({type:i.C.Error,message:"The Parties Types Records Retrieval was unsuccessful"}),(0,d._)(t))))}updatePartyType(a){return this.log.trace(`${e} Entering updatePartyType()`),this.log.debug(`${e} PartyType = ${JSON.stringify(a)}`),this.log.debug(`${e} Making a HTTP POST Request to ${o.N.partiesTypesBaseUrl}/${l} to update the record`),this.http.put(`${o.N.partiesTypesBaseUrl}/${l}`,JSON.stringify(a),{headers:new h.WM($)}).pipe((0,T.b)(t=>{this.log.trace(`${e} PartyType record Update was successful`),this.log.debug(`${e} Updated PartyType record = ${JSON.stringify(t)}`),this.log.trace(`${e} Searching for the locally stored PartyType record`);let r=this._cache.partiesTypes.findIndex(n=>n.id===t.id);if(this.log.debug(`${e} Updated PartyType record Index = ${r}`),-1!=r){this.log.trace(`${e} Updating the locally stored PartyType record`),this._cache.partiesTypes[r]=t,this.log.trace(`${e} Creating an up to date copy of the Parties Types Records`);const n=Object.assign({},this._cache).partiesTypes;this.log.trace(`${e} Broadcasting the up to date copy of the Parties Types Records to the current listener`),this._partiesTypesSubject$.next(n),this.log.trace(`${e} Broadcasting the up to date copy of the Parties Types Records to the other listeners`),this.bc.postMessage({newValue:n}),this.log.trace(`${e} Sending a message that states that the PartyType record Update was successful`),this.messageService.sendMessage({type:i.C.Success,message:"The PartyType record Update was successful"})}else this.log.error(`${e} Local Cache Update was unsuccessful: PartyType record is missing in the Local Cache`),this.log.trace(`${e} Sending a message that states that the Local Cache Update was unsuccessful`),this.messageService.sendMessage({type:i.C.Error,message:"Parties Types Records Local Cache Update was unsuccessful"})}),(0,P.K)(t=>(this.log.error(`${e} PartyType record Update was unsuccessful: ${t.statusText||"See Server Logs for more details"}`),this.log.trace(`${e} Sending a message that states that the PartyType record Update was unsuccessful`),this.messageService.sendMessage({type:i.C.Error,message:"The PartyType record Update was unsuccessful"}),(0,d._)(t))))}deletePartyType(a){return this.log.trace(`${e} Entering deletePartyType()`),this.log.debug(`${e} PartyType Id = ${a}`),this.log.debug(`${e} Making a HTTP DELETE Request to ${o.N.partiesTypesBaseUrl}/${l}/ids/${a} to delete the record`),this.http.delete(`${o.N.partiesTypesBaseUrl}/${l}/ids/${a}`,{headers:new h.WM($)}).pipe((0,T.b)(t=>{if(1==t){this.log.trace(`${e} PartyType record Deletion was successful`),this.log.trace(`${e} Searching for the deleted PartyType record in the Local Cache`);let r=this._cache.partiesTypes.findIndex(n=>n.id==a);if(this.log.debug(`${e} Deleted PartyType record Index = ${r}`),-1!=r){this.log.trace(`${e} Removing the deleted PartyType record from the Local Cache`),this._cache.partiesTypes.splice(r,1),this.log.trace(`${e} Creating an up to date copy of the Parties Types Records`);const n=Object.assign({},this._cache).partiesTypes;this.log.trace(`${e} Broadcasting the up to date copy of the Parties Types Records to the current listener`),this._partiesTypesSubject$.next(n),this.log.trace(`${e} Broadcasting the up to date copy of the Parties Types Records to the other listeners`),this.bc.postMessage({newValue:n}),this.log.trace(`${e} Sending a message that states that the PartyType record Deletion was successful`),this.messageService.sendMessage({type:i.C.Success,message:"The PartyType record Deletion was successful"})}else this.log.error(`${e} Local Cache Update was unsuccessful: PartyType record is missing in the Local Cache`),this.log.trace(`${e} Sending a message that states that the Local Cache Update was unsuccessful`),this.messageService.sendMessage({type:i.C.Error,message:"Parties Types Records Local Cache Update was unsuccessful"})}else this.log.error(`${e} PartyType record Deletion was unsuccessful: Expecting 1 record to be deleted instead of ${t}`),this.log.trace(`${e} Sending a message that states that the PartyType record Deletion was unsuccessful`),this.messageService.sendMessage({type:i.C.Error,message:"The PartyType record Deletion was unsuccessful"})}),(0,P.K)(t=>(this.log.error(`${e} PartyType record Deletion was unsuccessful: ${t.statusText||"See Server Logs for more details"}`),this.log.trace(`${e} Sending a message that states that the PartyType record Deletion was unsuccessful`),this.messageService.sendMessage({type:i.C.Error,message:"The PartyType record Deletion was unsuccessful"}),(0,d._)(t))))}get records(){return this._partiesTypesSubject$.value}}return g.\u0275fac=function(a){return new(a||g)(p.LFG(h.eN),p.LFG(c.qZ),p.LFG(c.ez),p.LFG(p.R0b),p.LFG(R.Kf))},g.\u0275prov=p.Yz7({token:g,factory:g.\u0275fac,providedIn:"root"}),g})()},866:(m,u,s)=>{s.r(u),s.d(u,{ROUTES:()=>o,PartiesRoutingModule:()=>i});var y=s(7713),E=s(8447),d=s(5264),h=s(2383);const o=[{path:":partyTypeId",canActivate:[],component:d.W6,data:{title:"Parties",breadcrumbs:[]}},{path:"**",pathMatch:"full",loadChildren:()=>s.e(253).then(s.bind(s,7253)).then(c=>c.ErrorRoutingModule)}];let i=(()=>{class c{}return c.\u0275fac=function(S){return new(S||c)},c.\u0275mod=h.oAB({type:c}),c.\u0275inj=h.cJS({imports:[[E.H,y.Bz.forChild(o)],y.Bz]}),c})()}}]);