{"version":3,"sources":["webpack:///src/modules/unit-categories/services/unit-categories-data.service.ts","webpack:///src/modules/unit-categories/services/index.ts","webpack:///src/modules/app-common/models/message.type.model.ts","webpack:///src/modules/unit-categories/services/unit-categories-records-tabulation.service.ts"],"names":["LOG_PREFIX","API_PREFIX","HEADERS","UnitCategoriesDataService","http","connectivityStatusService","messageService","zone","log","_baseUrl","baseUrl","_cache","unitCategories","_unitCategoriesSubject$","unitCategories$","asObservable","_done$","bc","BroadcastChannel","handleEvent","event","run","next","data","newValue","trace","online$","pipe","subscribe","online","debug","getAllUnitCategories","response","complete","onmessage","unitCategory","JSON","stringify","post","headers","push","copy","Object","assign","postMessage","sendMessage","Success","error","statusText","Error","unitCategoryId","get","index","findIndex","d","id","filters","params","put","count","splice","value","providedIn","services","MessageType","UnitCategoriesRecordsTabulationService","unitCategoriesDataService","_loadingSubject$","_loading$","_unitCategories$","_totalSubject$","_total$","_state","page","pageSize","searchTerm","sortColumn","sortDirection","_subscriptions","_transform","forEach","s","unsubscribe","patch","records","v1","v2","undefined","column","direction","sort","a","b","res","compare","term","name","toLowerCase","includes","slice","pos","map","length","transformed","filter","matches","total","paginate","_set"],"mappings":"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","file":"default~modules-unit-categories-unit-categories-routing-module~modules-units-units-routing-module-es5.js","sourcesContent":["import { Injectable, NgZone } from '@angular/core';\nimport { BehaviorSubject, Observable, Subject, throwError } from 'rxjs';\nimport { HttpClient, HttpHeaders } from '@angular/common/http';\nimport { NGXLogger } from 'ngx-logger';\nimport { UnitCategory } from '../models/unit-category.model';\nimport { environment } from 'environments/environment';\nimport { MessageType } from '@common/models/message.type.model';\nimport { ConnectivityStatusService, MessageService } from '@common/services';\nimport { catchError, first, takeUntil, tap } from 'rxjs/operators';\n\nconst LOG_PREFIX: string = \"[Unit Categories Data Service]\";\nconst API_PREFIX: string = \"api/v1/unit_categories\";\nconst HEADERS = { 'Content-Type': 'application/json' };\n\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class UnitCategoriesDataService {\n\n  // The base url of the server\n  private _baseUrl: string = environment.baseUrl;\n\n  // The local data cache\n  private _cache: { unitCategories: UnitCategory[] } = { unitCategories: [] };\n\n  // The observables that allow subscribers to keep tabs of the current status \n  // of unit categories records in the data store\n  private _unitCategoriesSubject$: BehaviorSubject<Array<UnitCategory>> = new BehaviorSubject<Array<UnitCategory>>([]);\n  readonly unitCategories$: Observable<Array<UnitCategory>> = this._unitCategoriesSubject$.asObservable();\n\n  // The observable that we will use to opt out of initialization subscriptions \n  // once we are done with them\n  private _done$ = new Subject<boolean>();\n\n  // The api that we'll use to communicate data store changes when components that \n  // subscribe to this service are outside the current ngzone\n  private bc: BroadcastChannel = new BroadcastChannel(\"unit-categories-data-channel\");\n\n  constructor(\n    private http: HttpClient,\n    private connectivityStatusService: ConnectivityStatusService,\n    private messageService: MessageService,\n    private zone: NgZone,\n    private log: NGXLogger,) {\n\n    // Subscribe to connectivity status notifications\n    this.log.trace(`${LOG_PREFIX} Subscribing to connectivity status notifications`);\n\n    this.connectivityStatusService.online$\n      .pipe(takeUntil(this._done$))\n      .subscribe(online => {\n\n        // Check if the user is online\n        this.log.trace(`${LOG_PREFIX} Checking if the user is online`);\n        this.log.debug(`${LOG_PREFIX} User is online = ${online}`);\n\n        if (online) {\n\n          // Initialize data\n          this.log.trace(`${LOG_PREFIX} Initializing data`);\n\n          this.getAllUnitCategories()\n            .pipe(first()) // This will automatically complete (and therefore unsubscribe) after the first value has been emitted.\n            .subscribe((response => {\n\n              // Data initialization complete\n              this.log.trace(`${LOG_PREFIX} Data initialization complete`);\n\n            }));\n\n          // Unsubscribe from connectivity status notifications\n          this.log.trace(`${LOG_PREFIX} Unsubscribing from connectivity status notifications`);\n          this._done$.next();\n          this._done$.complete();\n\n        }\n\n      });\n\n    //Note: \"bc.onmessage\" isn't invoked on sender ui\n    this.bc.onmessage = this.zone.run(() => this.handleEvent);\n  }\n\n\n  /**\n   * Publish information to current (listening) ui\n   * @param event \n   */\n   private handleEvent = (event: MessageEvent) => {\n    this.zone.run(() => this._unitCategoriesSubject$.next(event.data.newValue));\n  }\n    \n\n  /**\n   * Creates and adds an instance of a new Unit Category record to the local cache and then broadcasts the changes to all subscribers\n   * \n   * @param unitCategory The details of the Unit Category record to be created - with the id and version details missing\n   */\n  public createUnitCategory(unitCategory: UnitCategory): Observable<UnitCategory> {\n\n    this.log.trace(`${LOG_PREFIX} Entering createUnitCategory()`);\n    this.log.debug(`${LOG_PREFIX} UnitCategory = ${JSON.stringify(unitCategory)}`);\n\n    // Make a HTTP POST Request to create the record\n    this.log.debug(`${LOG_PREFIX} Making a HTTP POST Request to ${this._baseUrl}/${API_PREFIX} to create the record`);\n\n    return this.http.post<UnitCategory>(`${this._baseUrl}/${API_PREFIX}`, JSON.stringify(unitCategory), { headers: new HttpHeaders(HEADERS) })\n      .pipe(\n\n        tap((data: UnitCategory) => {\n\n          // Unit Category record Creation was successful\n          this.log.trace(`${LOG_PREFIX} Record Creation was successful`);\n          this.log.debug(`${LOG_PREFIX} Created Unit Category record = ${JSON.stringify(data)}`);\n\n          // Add the newly created Unit Category record to the Local Cache\n          this.log.trace(`${LOG_PREFIX} Adding the newly created Unit Category record to the Local Cache`);\n          this._cache.unitCategories.push(data);\n\n          // Create an up to date copy of the Unit Categories records\n          this.log.trace(`${LOG_PREFIX} Creating an up to date copy of the Unit Categories records`);\n          const copy = Object.assign({}, this._cache).unitCategories;\n\n          // Broadcast the up to date copy of the Unit Categories records to the current listener\n          this.log.trace(`${LOG_PREFIX} Broadcasting the up to date copy of the Unit Categories records to the current listener`);\n          this._unitCategoriesSubject$.next(copy);\n\n          // Broadcast the up to date copy of the Unit Categories records to the other listeners\n          this.log.trace(`${LOG_PREFIX} Broadcasting the up to date copy of the Unit Categories records to the other listeners`);\n          this.bc.postMessage({ newValue: copy });\n\n          // Send a message that states that the Unit Category record Creation was successful\n          this.log.trace(`${LOG_PREFIX} Sending a message that states that the Unit Category record Creation was successful`);\n          this.messageService.sendMessage({ \"type\": MessageType.Success, \"message\": \"The Unit Category record Creation was successful\" });\n\n        }),\n\n        catchError((error: any) => {\n\n          // Unit Category record Creation was unsuccessful\n          this.log.error(`${LOG_PREFIX} Unit Category record Creation was unsuccessful: ${error.statusText || \"See Server Logs for more details\"}`);\n\n          // Send a message that states that the Unit Category record Creation was unsuccessful\n          this.log.trace(`${LOG_PREFIX} Sending a message that states that the Unit Category record Creation was unsuccessful`);\n          this.messageService.sendMessage({ \"type\": MessageType.Error, \"message\": \"The Unit Category record Creation was unsuccessful\" });\n\n          return throwError(error);\n        }));\n  }\n\n\n  /**\n   * Retrieves and adds a single Unit Category record to the local cache and then broadcasts the changes to all subscribers\n   * \n   * @param unitCategoryId The Unique Identifier of the Unit Category record\n   */\n  getUnitCategory(unitCategoryId: number): Observable<UnitCategory> {\n\n    this.log.trace(`${LOG_PREFIX} Entering getUnitCategory()`);\n    this.log.debug(`${LOG_PREFIX} UnitCategory Id = ${unitCategoryId}`);\n\n    // Make a HTTP GET Request to retrieve the record\n    this.log.debug(`${LOG_PREFIX} Making a HTTP GET Request to ${this._baseUrl}/${API_PREFIX}/ids/${unitCategoryId} to retrieve the record`);\n\n    return this.http.get<UnitCategory>(`${this._baseUrl}/${API_PREFIX}/ids/${unitCategoryId}`, { headers: new HttpHeaders(HEADERS) })\n      .pipe(\n\n        tap((data: UnitCategory) => {\n\n          // Unit Category record Retrieval was successful\n          this.log.trace(`${LOG_PREFIX} Unit Category record Retrieval was successful`);\n          this.log.debug(`${LOG_PREFIX} Retrieved Unit Category record = ${JSON.stringify(data)}`);\n\n          // Search for the Unit Category record in the Local Cache and return its index\n          this.log.trace(`${LOG_PREFIX} Searching for the Unit Category record in the Local Cache and returning its index`);\n          let index = this._cache.unitCategories.findIndex(d => d.id === data.id);\n          this.log.debug(`${LOG_PREFIX} Unit Category record Index = ${index}`);\n\n          // If the record was found (index != -1), update it, else, add it to the Local Storage\n          if (index != -1) {\n\n            // The Unit Category record was found in the Local Cache\n            this.log.trace(`${LOG_PREFIX} The Unit Category record was found in the Local Cache`);\n\n            // Update the local Unit Category record\n            this.log.trace(`${LOG_PREFIX} Updating the local Unit Category record`);\n            this._cache.unitCategories[index] = data;\n\n          } else {\n\n            // The Unit Category record was not found in the Local Cache\n            this.log.trace(`${LOG_PREFIX} The Unit Category record was not found in the Local Cache`);\n\n            // Add the Unit Category record to the Local Cache\n            this.log.trace(`${LOG_PREFIX} Adding the Unit Category record to the Local Cache`);\n            this._cache.unitCategories.push(data);\n          }\n\n          // Create an up to date copy of the Unit Categories records\n          this.log.trace(`${LOG_PREFIX} Creating an up to date copy of the Unit Categories records`);\n          const copy = Object.assign({}, this._cache).unitCategories;\n\n          // Broadcast the up to date copy of the Unit Categories records to the current listener\n          this.log.trace(`${LOG_PREFIX} Broadcasting the up to date copy of the Unit Categories records to the current listener`);\n          this._unitCategoriesSubject$.next(copy);\n\n          // Broadcast the up to date copy of the Unit Categories records to the other listeners\n          this.log.trace(`${LOG_PREFIX} Broadcasting the up to date copy of the Unit Categories records to the other listeners`);\n          this.bc.postMessage({ newValue: copy });\n\n          // Send a message that states that the Unit Category record Retrieval was successful\n          this.log.trace(`${LOG_PREFIX} Sending a message that states that the Unit Category record Retrieval was successful`);\n          this.messageService.sendMessage({ \"type\": MessageType.Success, \"message\": \"The Unit Category record Retrieval was successful\" });\n\n        }),\n\n        catchError((error: any) => {\n\n          // Unit Category record Retrieval was unsuccessful\n          this.log.error(`${LOG_PREFIX} Unit Category record Retrieval was unsuccessful: ${error.statusText || \"See Server Logs for more details\"}`);\n\n          // Send a message that states that the Unit Category record Retrieval was unsuccessful\n          this.log.trace(`${LOG_PREFIX} Sending a message that states that the Unit Category record Retrieval was unsuccessful`);\n          this.messageService.sendMessage({ \"type\": MessageType.Error, \"message\": \"The Unit Category record Retrieval was unsuccessful\" });\n\n          return throwError(error);\n        }));\n  }\n\n\n  /**\n   * Retrieves and adds all or a subset of all Unit Categories records to the local cache and then broadcasts the changes to all subscribers\n   * \n   * @param filters Optional query parameters used in filtering the retrieved records\n   */\n  getAllUnitCategories(filters?: any): Observable<UnitCategory[]> {\n\n    this.log.trace(`${LOG_PREFIX} Entering getAllUnitCategories()`);\n    this.log.debug(`${LOG_PREFIX} Filters = ${JSON.stringify(filters)}`);\n\n    // Make a HTTP GET Request to retrieve the records\n    this.log.debug(`${LOG_PREFIX} Making a HTTP GET Request to ${this._baseUrl}/${API_PREFIX}/all to retrieve the records`);\n\n    return this.http.get<UnitCategory[]>(`${this._baseUrl}/${API_PREFIX}/all`, { headers: new HttpHeaders(HEADERS), params: filters == null ? {} : filters })\n      .pipe(\n\n        tap((data: UnitCategory[]) => {\n\n          // Unit Categories records Retrieval was successful\n          this.log.trace(`${LOG_PREFIX} Unit Categories records Retrieval was successful`);\n          this.log.debug(`${LOG_PREFIX} Retrieved Unit Categories records = ${JSON.stringify(data)}`);\n\n          // Update the Unit Categories records in the Local Cache to the newly pulled Unit Categories records\n          this.log.trace(`${LOG_PREFIX} Updating the Unit Categories records in the Local Cache to the newly pulled Unit Categories records`);\n          this._cache.unitCategories = data;\n\n          // Create an up to date copy of the Unit Categories records\n          this.log.trace(`${LOG_PREFIX} Creating an up to date copy of the Unit Categories records`);\n          const copy = Object.assign({}, this._cache).unitCategories;\n\n          // Broadcast the up to date copy of the Unit Categories records to the current listener\n          this.log.trace(`${LOG_PREFIX} Broadcasting the up to date copy of the Unit Categories records to the current listener`);\n          this._unitCategoriesSubject$.next(copy);\n\n          // Broadcast the up to date copy of the Unit Categories records to the other listeners\n          this.log.trace(`${LOG_PREFIX} Broadcasting the up to date copy of the Unit Categories records to the other listeners`);\n          this.bc.postMessage({ newValue: copy });\n\n          // Send a message that states that the Unit Categories records Retrieval was successful\n          this.log.trace(`${LOG_PREFIX} Sending a message that states that the Unit Categories records Retrieval was successful`);\n          this.messageService.sendMessage({ \"type\": MessageType.Success, \"message\": \"The Unit Categories records Retrieval was successful\" });\n\n        }),\n\n        catchError((error: any) => {\n\n          // Unit Categories records Retrieval was unsuccessful\n          this.log.error(`${LOG_PREFIX} Unit Categories records Retrieval was unsuccessful: ${error.statusText || \"See Server Logs for more details\"}`);\n\n          // Send a message that states that the Unit Categories records Retrieval was unsuccessful\n          this.log.trace(`${LOG_PREFIX} Sending a message that states that the Unit Categories records Retrieval was unsuccessful`);\n          this.messageService.sendMessage({ \"type\": MessageType.Error, \"message\": \"The Unit Categories records Retrieval was unsuccessful\" });\n\n          return throwError(error);\n        }));\n  }\n\n\n  /**\n   * Updates a single Unit Category record and its corresponding counterpart in the local cache and then broadcasts the changes to all subscribers\n   * \n   * @param unitCategory The details of the Unit Category record to be updated\n   */\n  updateUnitCategory(unitCategory: UnitCategory): Observable<UnitCategory> {\n\n    this.log.trace(`${LOG_PREFIX} Entering updateUnitCategory()`);\n    this.log.debug(`${LOG_PREFIX} UnitCategory = ${JSON.stringify(unitCategory)}`);\n\n    // Make a HTTP POST Request to retrieve the records\n    this.log.debug(`${LOG_PREFIX} Making a HTTP POST Request to ${this._baseUrl}/${API_PREFIX} to update the record`);\n\n    return this.http.put<UnitCategory>(`${this._baseUrl}/${API_PREFIX}`, JSON.stringify(unitCategory), { headers: new HttpHeaders(HEADERS) })\n      .pipe(\n\n        tap((data: UnitCategory) => {\n\n          // Unit Category record Update was successful\n          this.log.trace(`${LOG_PREFIX} Unit Category record Update was successful`);\n          this.log.debug(`${LOG_PREFIX} Updated Unit Category record = ${JSON.stringify(data)}`);\n\n          // Search for the locally stored Unit Category record\n          this.log.trace(`${LOG_PREFIX} Searching for the locally stored Unit Category record`);\n          let index = this._cache.unitCategories.findIndex(d => d.id === data.id);\n          this.log.debug(`${LOG_PREFIX} Updated Unit Category record Index = ${index}`);\n\n          // If the record was found (index != -1), update it in the Local Cache\n          if (index != -1) {\n\n            // Update the local Unit Category record\n            this.log.trace(`${LOG_PREFIX} Updating the locally stored Unit Category record`);\n            this._cache.unitCategories[index] = data;\n\n            // Create an up to date copy of the Unit Categories records\n            this.log.trace(`${LOG_PREFIX} Creating an up to date copy of the Unit Categories records`);\n            const copy = Object.assign({}, this._cache).unitCategories;\n\n            // Broadcast the up to date copy of the Unit Categories records to the current listener\n            this.log.trace(`${LOG_PREFIX} Broadcasting the up to date copy of the Unit Categories records to the current listener`);\n            this._unitCategoriesSubject$.next(copy);\n\n            // Broadcast the up to date copy of the Unit Categories records to the other listeners\n            this.log.trace(`${LOG_PREFIX} Broadcasting the up to date copy of the Unit Categories records to the other listeners`);\n            this.bc.postMessage({ newValue: copy });\n\n            // Send a message that states that the Unit Category record Update was successful\n            this.log.trace(`${LOG_PREFIX} Sending a message that states that the Unit Category record Update was successful`);\n            this.messageService.sendMessage({ \"type\": MessageType.Success, \"message\": \"The Unit Category record Update was successful\" });\n\n          } else {\n\n            // Local Cache Update was unsuccessful\n            this.log.error(`${LOG_PREFIX} Local Cache Update was unsuccessful: Unit Category record is missing in the Local Cache`);\n\n            // Send a message that states that the Local Cache Update was unsuccessful\n            this.log.trace(`${LOG_PREFIX} Sending a message that states that the Local Cache Update was unsuccessful`);\n            this.messageService.sendMessage({ \"type\": MessageType.Error, \"message\": \"Unit Categories records Local Cache Update was unsuccessful\" });\n          }\n\n        }),\n\n        catchError((error: any) => {\n\n          // Unit Category record Update was unsuccessful\n          this.log.error(`${LOG_PREFIX} Unit Category record Update was unsuccessful: ${error.statusText || \"See Server Logs for more details\"}`);\n\n          // Send a message that states that the Unit Category record Update was unsuccessful\n          this.log.trace(`${LOG_PREFIX} Sending a message that states that the Unit Category record Update was unsuccessful`);\n          this.messageService.sendMessage({ \"type\": MessageType.Error, \"message\": \"The Unit Category record Update was unsuccessful\" });\n\n          return throwError(error);\n\n        }));\n  }\n\n\n  /**\n   * Deletes a single Unit Category record and its corresponding counterpart in the local cache and then broadcasts the changes to all subscribers\n   *\n   * @param unitCategoryId The Unique Identifier of the record\n   * @returns The total count of deleted records - which should be 1 in this case if the delete operation was successful\n   */\n  deleteUnitCategory(unitCategoryId: number): Observable<number> {\n\n    this.log.trace(`${LOG_PREFIX} Entering deleteUnitCategory()`);\n    this.log.debug(`${LOG_PREFIX} UnitCategory Id = ${unitCategoryId}`);\n\n    // Make a HTTP DELETE Request to retrieve the records\n    this.log.debug(`${LOG_PREFIX} Making a HTTP DELETE Request to ${this._baseUrl}/${API_PREFIX}/ids/${unitCategoryId} to delete the record`);\n\n    return this.http.delete<number>(`${this._baseUrl}/${API_PREFIX}/ids/${unitCategoryId}`, { headers: new HttpHeaders(HEADERS) })\n      .pipe(\n\n        tap((count: number) => {\n\n          // Mark the deletion successful if and only if exactly 1 record was deleted\n          if (count == 1) {\n\n            // Unit Category record Deletion was successful\n            this.log.trace(`${LOG_PREFIX} Unit Category record Deletion was successful`);\n\n            // Search for the deleted Unit Category record in the Local Cache\n            this.log.trace(`${LOG_PREFIX} Searching for the deleted Unit Category record in the Local Cache`);\n            let index = this._cache.unitCategories.findIndex(d => d.id == unitCategoryId);\n            this.log.debug(`${LOG_PREFIX} Deleted Unit Category record Index = ${index}`);\n\n            // If the record was found (index != -1), remove it from the Local Cache\n            if (index != -1) {\n\n              // Remove the deleted Unit Category record from the Local Cache\n              this.log.trace(`${LOG_PREFIX} Removing the deleted Unit Category record from the Local Cache`);\n              this._cache.unitCategories.splice(index, 1);\n\n              // Create an up to date copy of the Unit Categories records\n              this.log.trace(`${LOG_PREFIX} Creating an up to date copy of the Unit Categories records`);\n              const copy = Object.assign({}, this._cache).unitCategories;\n\n              // Broadcast the up to date copy of the Unit Categories records to the current listener\n              this.log.trace(`${LOG_PREFIX} Broadcasting the up to date copy of the Unit Categories records to the current listener`);\n              this._unitCategoriesSubject$.next(copy);\n\n              // Broadcast the up to date copy of the Unit Categories records to the other listeners\n              this.log.trace(`${LOG_PREFIX} Broadcasting the up to date copy of the Unit Categories records to the other listeners`);\n              this.bc.postMessage({ newValue: copy });\n\n              // Send a message that states that the Unit Category record Deletion was successful\n              this.log.trace(`${LOG_PREFIX} Sending a message that states that the Unit Category record Deletion was successful`);\n              this.messageService.sendMessage({ \"type\": MessageType.Success, \"message\": \"The Unit Category record Deletion was successful\" });\n\n            } else {\n\n              // Local Cache Update was unsuccessful\n              this.log.error(`${LOG_PREFIX} Local Cache Update was unsuccessful: Unit Category record is missing in the Local Cache`);\n\n              // Send a message that states that the Local Cache Update was unsuccessful\n              this.log.trace(`${LOG_PREFIX} Sending a message that states that the Local Cache Update was unsuccessful`);\n              this.messageService.sendMessage({ \"type\": MessageType.Error, \"message\": \"Unit Categories records Local Cache Update was unsuccessful\" });\n            }\n          } else {\n\n            // Unit Category record Deletion was unsuccessful\n            this.log.error(`${LOG_PREFIX} Unit Category record Deletion was unsuccessful: Expecting 1 record to be deleted instead of ${count}`);\n\n            // Send a message that states that the Unit Category record Deletion was unsuccessful\n            this.log.trace(`${LOG_PREFIX} Sending a message that states that the Unit Category record Deletion was unsuccessful`);\n            this.messageService.sendMessage({ \"type\": MessageType.Error, \"message\": \"The Unit Category record Deletion was unsuccessful\" });\n\n          }\n\n\n        }),\n\n        catchError((error: any) => {\n\n          // Unit Category record Deletion was unsuccessful\n          this.log.error(`${LOG_PREFIX} Unit Category record Deletion was unsuccessful: ${error.statusText || \"See Server Logs for more details\"}`);\n\n          // Send a message that states that the Unit Category record Deletion was unsuccessful\n          this.log.trace(`${LOG_PREFIX} Sending a message that states that the Unit Category record Deletion was unsuccessful`);\n          this.messageService.sendMessage({ \"type\": MessageType.Error, \"message\": \"The Unit Category record Deletion was unsuccessful\" });\n\n          return throwError(error);\n        }));\n  }\n\n\n  /**\n   * Use BehaviorSubject's getter property named value to get the most recent value passed through it.\n   */\n  public get records() {\n    return this._unitCategoriesSubject$.value;\n  }\n}\n","\nimport { UnitCategoriesDataService } from './unit-categories-data.service';\nimport { UnitCategoriesRecordsTabulationService } from './unit-categories-records-tabulation.service';\n\nexport const services = [UnitCategoriesDataService, UnitCategoriesRecordsTabulationService];\n\n\nexport * from './unit-categories-data.service';\nexport * from './unit-categories-records-tabulation.service';\n","export enum MessageType {\n    Success,\n    Error,\n    Info,\n    Warning\n}","import { Injectable, OnDestroy, OnInit } from '@angular/core';\nimport { UnitCategoriesDataService } from './unit-categories-data.service';\nimport { NGXLogger } from 'ngx-logger';\nimport { BehaviorSubject, Subscription } from 'rxjs';\nimport { State } from '@common/models';\nimport { SortDirection } from '@common/directives/sortable.directive';\nimport { UnitCategory } from '../models/unit-category.model';\n\nconst LOG_PREFIX: string = \"[Unit Categories Records Tabulation Service]\";\n\n@Injectable({ providedIn: 'root' })\nexport class UnitCategoriesRecordsTabulationService implements OnDestroy {\n\n    // The observables that will be updated / broadcasted whenever \n    // a background task is started and completed  \n    private _loadingSubject$ = new BehaviorSubject<boolean>(true);\n    private _loading$ = this._loadingSubject$.asObservable();\n\n    // The first set of observables that will be updated / broadcasted whenever \n    // Unit Categories records are transformed as per the user defined search \n    // or sort criteria    \n    private _unitCategoriesSubject$ = new BehaviorSubject<UnitCategory[]>([]);\n    private _unitCategories$ = this._unitCategoriesSubject$.asObservable();\n\n    // The second set of observables that will be updated / broadcasted whenever \n    // Unit Categories records are transformed as per the user defined search \n    // or sort criteria\n    private _totalSubject$ = new BehaviorSubject<number>(0);\n    private _total$ = this._totalSubject$.asObservable();\n\n    // The user defined search or sort criteria.\n    // Determines which & how many Unit Categories records should be displayed\n    private _state: State = { page: 1, pageSize: 4, searchTerm: '', sortColumn: '', sortDirection: '' };\n\n    // A common gathering point for all the component's subscriptions.\n    // Makes it easier to unsubscribe from all subscriptions when the component is destroyed.   \n    private _subscriptions: Subscription[] = [];\n\n    constructor(\n        private unitCategoriesDataService: UnitCategoriesDataService,\n        private log: NGXLogger) {\n\n        this._subscriptions.push(\n            this.unitCategoriesDataService.unitCategories$\n                .subscribe(\n                    (unitCategories: UnitCategory[]) => {\n                        this._transform(unitCategories);\n                    }));\n\n    }\n\n  ngOnDestroy() {\n        this._subscriptions.forEach((s) => s.unsubscribe());\n    }\n\n    /**\n     * Returns an observable containing Unit Categories records that have been filtered as per the user defined criteria\n     */\n    get unitCategories$() {\n        this.log.trace(`${LOG_PREFIX} Getting unitCategories$ observable`);\n        this.log.debug(`${LOG_PREFIX} Current unitCategories$ observable value = ${JSON.stringify(this._unitCategoriesSubject$.value)}`);\n        return this._unitCategories$;\n    }\n\n\n    /**\n     * Returns an observable containing the total number of Unit Categories records that have been filtered as per the user defined criteria\n     */\n    get total$() {\n        this.log.trace(`${LOG_PREFIX} Getting total$ observable`);\n        this.log.debug(`${LOG_PREFIX} Current total$ observable value = ${JSON.stringify(this._totalSubject$.value)}`);\n        return this._total$;\n    }\n\n\n    /**\n     * Returns an observable containing a boolean flag that indicates whether or not a data operation exercise (sorting, searching etc.) is currently underway\n     */\n    get loading$() {\n        this.log.trace(`${LOG_PREFIX} Getting loading$ observable`);\n        this.log.debug(`${LOG_PREFIX} Current loading$ observable value = ${JSON.stringify(this._loadingSubject$.value)}`);\n        return this._loading$;\n    }\n\n\n    /**\n     * Returns the currently active page\n     */\n    get page() {\n        this.log.trace(`${LOG_PREFIX} Getting page detail`);\n        this.log.debug(`${LOG_PREFIX} Current page detail value = ${JSON.stringify(this._state.page)}`);\n        return this._state.page;\n    }\n\n\n    /**\n     * Updates the currently active page detail and then triggers data transformation\n     */\n    set page(page: number) {\n        this.log.trace(`${LOG_PREFIX} Setting page detail to ${JSON.stringify(page)}`);\n        this._set({ page });\n    }\n\n\n    /**\n     * Returns the currently set page size\n     */\n    get pageSize() {\n        this.log.trace(`${LOG_PREFIX} Getting page size detail`);\n        this.log.debug(`${LOG_PREFIX} Current page size detail = ${JSON.stringify(this._state.pageSize)}`);\n        return this._state.pageSize;\n    }\n\n\n    /**\n     * Updates the desired page size detail and then triggers data transformation\n     */\n    set pageSize(pageSize: number) {\n        this.log.debug(`${LOG_PREFIX} Setting page size to ${JSON.stringify(pageSize)}`);\n        this._set({ pageSize });\n    }\n\n\n    /**\n     * Gets the currently entered search term\n     */\n    get searchTerm() {\n        this.log.debug(`${LOG_PREFIX} Getting search term detail`);\n        this.log.debug(`${LOG_PREFIX} Current search term detail = ${JSON.stringify(this._state.searchTerm)}`);\n        return this._state.searchTerm;\n    }\n\n\n    /**\n     * Updates the search term detail and then triggers data transformation\n     */\n    set searchTerm(searchTerm: string) {\n        this.log.debug(`${LOG_PREFIX} Setting search term to ${JSON.stringify(searchTerm)}`);\n        this._set({ searchTerm });\n    }\n\n\n    /**\n     * Updates the sort column detail and then triggers data transformation\n     */\n    set sortColumn(sortColumn: string) {\n        this.log.debug(`${LOG_PREFIX} Setting sort column to ${JSON.stringify(sortColumn)}`);\n        this._set({ sortColumn });\n    }\n\n\n    /**\n     * Updates the sort direction detail and then triggers data transformation\n     */\n    set sortDirection(sortDirection: SortDirection) {\n        this.log.debug(`${LOG_PREFIX} Setting sort direction to ${JSON.stringify(sortDirection)}`);\n        this._set({ sortDirection });\n    }\n\n\n    /**\n     * Utility method for all the class setters.\n     * Does the actual updating of details / transforming of data\n     * @param patch the partially updated details\n     */\n    private _set(patch: Partial<State>) {\n\n        // Update the state\n        Object.assign(this._state, patch);\n\n\n        // Transform the Unit Categories records\n        this._transform(this.unitCategoriesDataService.records);\n\n    }\n\n\n    /**\n     * Compares two values to find out if the first value preceeds the second.\n     * When comparing string values, please note that this method is case sensitive\n     * \n     * @param v1 The first value\n     * @param v2 The second value\n     * @returns -1 if v1 preceeds v2, 0 if v1 is equal to v2 or 1 if v1 is greater than v2\n     */\n    compare(v1: number | string | undefined | null, v2: number | string | undefined | null) {\n        this.log.trace(`${LOG_PREFIX} Comparing two values to find out if the first value preceeds the second`);\n        return (v1 == undefined || v1 == null || v2 == undefined || v2 == null) ? 0 : v1 < v2 ? -1 : v1 > v2 ? 1 : 0;\n    }\n\n\n    /**\n     * Sorts Unit Categories Records\n     * \n     * @param unitCategories The Unit Categories records to sort\n     * @param column The table column to sort the records by \n     * @param direction The desired sort direction - ascending or descending\n     * @returns The sorted Unit Categories records\n     */\n    sort(unitCategories: UnitCategory[], column: string, direction: string): UnitCategory[] {\n        this.log.trace(`${LOG_PREFIX} Sorting Unit Categories records`);\n        if (direction === '' || column == null) {\n            return unitCategories;\n        } else {\n            return [...unitCategories].sort((a, b) => {\n                const res = this.compare(a[column], b[column]);\n                return direction === 'asc' ? res : -res;\n            });\n        }\n    }\n\n\n    /**\n     * Checks if search string is present in Unit Category record\n     * \n     * @param unitCategory The Unit Category record\n     * @param term The Search String\n     * @returns A boolean result indicating whether or not a match was found\n     */\n    matches(unitCategory: UnitCategory, term: string): boolean {\n        this.log.trace(`${LOG_PREFIX} Checking if search string is present in Unit Category record`);\n        if (unitCategory != null && unitCategory != undefined) {\n\n            // Try locating the search string in the Unit Category's name\n            if (unitCategory.name != null && unitCategory.name != undefined) {\n                if (unitCategory.name.toLowerCase().includes(term.toLowerCase())) {\n                    return true;\n                }\n            }\n        }\n\n        return false;\n    }\n\n\n    /**\n     * Paginates Unit Categories Records\n     * \n     * @param unitCategories The Unit Categories records to paginate\n     * @returns The paginated Unit Categories records\n     */\n    paginate(unitCategories: UnitCategory[], page: number, pageSize: number): UnitCategory[] {\n        this.log.trace(`${LOG_PREFIX} Paginating Unit Categories records`);\n        return unitCategories.slice((page - 1) * pageSize, (page - 1) * pageSize + pageSize);\n    }\n\n    /**\n     * Updates the index of the Unit Categories Records\n     * \n     * @param unitCategories The Unit Categories records to sort\n     * @returns The newly indexed Unit Categories records\n     */\n    index(unitCategories: UnitCategory[]): UnitCategory[] {\n        this.log.trace(`${LOG_PREFIX} Indexing Unit Categories records`);\n        let pos: number = 0;\n        return unitCategories.map(d => {\n            d.pos = ++pos;\n            return d;\n        });\n    }\n\n\n    /**\n     * Sorts, filters and paginates Unit Categories records\n     * \n     * @param records the original Unit Categories records\n     */\n    private _transform(records: UnitCategory[]) {\n\n        // Flag\n        this._loadingSubject$.next(true);\n\n        if (records.length != 0) {\n\n            this.log.trace(`${LOG_PREFIX} Sorting, filtering and paginating Unit Categories records`);\n\n            const { sortColumn, sortDirection, pageSize, page, searchTerm } = this._state;\n\n            // Sort\n            let transformed: UnitCategory[] = this.sort(records, sortColumn, sortDirection);\n\n            // Filter\n            transformed = transformed.filter(unitCategory => this.matches(unitCategory, searchTerm));\n            const total: number = transformed.length;\n\n            // Index\n            transformed = this.index(transformed);\n\n            // Paginate\n            transformed = this.paginate(transformed, page, pageSize);\n\n            // Broadcast\n            this._unitCategoriesSubject$.next(transformed);\n            this._totalSubject$.next(total);\n\n        } else {\n\n            // Broadcast\n            this._unitCategoriesSubject$.next([]);\n            this._totalSubject$.next(0);\n        }\n\n        // Flag\n        this._loadingSubject$.next(false);\n\n    }\n\n}\n"]}