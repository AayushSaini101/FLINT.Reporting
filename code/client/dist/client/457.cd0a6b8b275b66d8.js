"use strict";(self.webpackChunkclient=self.webpackChunkclient||[]).push([[457],{6457:(C,$,c)=>{c.d($,{c:()=>m});var A=c(4499),_=c(273),g=c(9433),h=c(4522),n=c(8260),a=c(824),T=c(6620),f=c(6263),S=c(6047),d=c(7384),p=c(2835),l=c(2383),E=c(1585);const e="[Accountabilities Types Data Service]",r="api/v1/accountability_types",y={"Content-Type":"application/json"};let m=(()=>{class u{constructor(s,t,i,o,R){this.http=s,this.connectivityStatusService=t,this.messageService=i,this.zone=o,this.log=R,this._cache={accountabilitiesTypes:[]},this._accountabilitiesTypesSubject$=new A.X([]),this.accountabilitiesTypes$=this._accountabilitiesTypesSubject$.asObservable(),this._done$=new _.x,this.bc=new BroadcastChannel("accountabilities-types-data-channel"),this.handleEvent=b=>{this.zone.run(()=>this._accountabilitiesTypesSubject$.next(b.data.newValue))},this.log.trace(`${e} Subscribing to connectivity status notifications`),this.connectivityStatusService.online$.pipe((0,f.R)(this._done$)).subscribe(b=>{this.log.trace(`${e} Checking if the user is online`),this.log.debug(`${e} User is online = ${b}`),b&&(this.log.trace(`${e} Initializing data`),this.getAllAccountabilitiesTypes().pipe((0,S.P)()).subscribe(M=>{this.log.trace(`${e} Data initialization complete`)}),this.log.trace(`${e} Unsubscribing from connectivity status notifications`),this._done$.next(!0),this._done$.complete())}),this.bc.onmessage=this.zone.run(()=>this.handleEvent)}createAccountabilityType(s){return this.log.trace(`${e} Entering createAccountabilityType()`),this.log.debug(`${e} AccountabilityType = ${JSON.stringify(s)}`),this.log.debug(`${e} Making a HTTP POST Request to ${n.N.accountabilitiesTypesBaseUrl}/${r} to create the record`),this.http.post(`${n.N.accountabilitiesTypesBaseUrl}/${r}`,JSON.stringify(s),{headers:new h.WM(y)}).pipe((0,d.b)(t=>{this.log.trace(`${e} Record Creation was successful`),this.log.debug(`${e} Created AccountabilityType record = ${JSON.stringify(t)}`),this.log.trace(`${e} Adding the newly created AccountabilityType record to the Local Cache`),this._cache.accountabilitiesTypes.push(t),this.log.trace(`${e} Creating an up to date copy of the Accountabilities Types Records`);const i=Object.assign({},this._cache).accountabilitiesTypes;this.log.trace(`${e} Broadcasting the up to date copy of the Accountabilities Types Records to the current listener`),this._accountabilitiesTypesSubject$.next(i),this.log.trace(`${e} Broadcasting the up to date copy of the Accountabilities Types Records to the other listeners`),this.bc.postMessage({newValue:i}),this.log.trace(`${e} Sending a message that states that the AccountabilityType record Creation was successful`),this.messageService.sendMessage({type:a.C.Success,message:"The AccountabilityType record Creation was successful"})}),(0,p.K)(t=>(this.log.error(`${e} AccountabilityType record Creation was unsuccessful: ${t.statusText||"See Server Logs for more details"}`),this.log.trace(`${e} Sending a message that states that the AccountabilityType record Creation was unsuccessful`),this.messageService.sendMessage({type:a.C.Error,message:"The AccountabilityType record Creation was unsuccessful"}),(0,g._)(t))))}getAllAccountabilitiesTypes(s){return this.log.trace(`${e} Entering getAllAccountabilitiesTypes()`),this.log.debug(`${e} Filters = ${JSON.stringify(s)}`),this.log.debug(`${e} Making a HTTP GET Request to ${n.N.accountabilitiesTypesBaseUrl}/${r}/all to retrieve the records`),this.http.get(`${n.N.accountabilitiesTypesBaseUrl}/${r}/all`,{headers:new h.WM(y),params:null==s?{}:s}).pipe((0,d.b)(t=>{this.log.trace(`${e} Accountabilities Types Records Retrieval was successful`),this.log.debug(`${e} Retrieved Accountabilities Types Records = ${JSON.stringify(t)}`),this.log.trace(`${e} Updating the Accountabilities Types Records in the Local Cache to the newly pulled Accountabilities Types Records`),this._cache.accountabilitiesTypes=t,this.log.trace(`${e} Creating an up to date copy of the Accountabilities Types Records`);const i=Object.assign({},this._cache).accountabilitiesTypes;this.log.trace(`${e} Broadcasting the up to date copy of the Accountabilities Types Records to the current listener`),this._accountabilitiesTypesSubject$.next(i),this.log.trace(`${e} Broadcasting the up to date copy of the Accountabilities Types Records to the other listeners`),this.bc.postMessage({newValue:i}),this.log.trace(`${e} Sending a message that states that the Accountabilities Types Records Retrieval was successful`),this.messageService.sendMessage({type:a.C.Success,message:"The Accountabilities Types Records Retrieval was successful"})}),(0,p.K)(t=>(this.log.error(`${e} Accountabilities Types Records Retrieval was unsuccessful: ${t.statusText||"See Server Logs for more details"}`),this.log.trace(`${e} Sending a message that states that the Accountabilities Types Records Retrieval was unsuccessful`),this.messageService.sendMessage({type:a.C.Error,message:"The Accountabilities Types Records Retrieval was unsuccessful"}),(0,g._)(t))))}updateAccountabilityType(s){return this.log.trace(`${e} Entering updateAccountabilityType()`),this.log.debug(`${e} AccountabilityType = ${JSON.stringify(s)}`),this.log.debug(`${e} Making a HTTP POST Request to ${n.N.accountabilitiesTypesBaseUrl}/${r} to update the record`),this.http.put(`${n.N.accountabilitiesTypesBaseUrl}/${r}`,JSON.stringify(s),{headers:new h.WM(y)}).pipe((0,d.b)(t=>{this.log.trace(`${e} AccountabilityType record Update was successful`),this.log.debug(`${e} Updated AccountabilityType record = ${JSON.stringify(t)}`),this.log.trace(`${e} Searching for the locally stored AccountabilityType record`);let i=this._cache.accountabilitiesTypes.findIndex(o=>o.id===t.id);if(this.log.debug(`${e} Updated AccountabilityType record Index = ${i}`),-1!=i){this.log.trace(`${e} Updating the locally stored AccountabilityType record`),this._cache.accountabilitiesTypes[i]=t,this.log.trace(`${e} Creating an up to date copy of the Accountabilities Types Records`);const o=Object.assign({},this._cache).accountabilitiesTypes;this.log.trace(`${e} Broadcasting the up to date copy of the Accountabilities Types Records to the current listener`),this._accountabilitiesTypesSubject$.next(o),this.log.trace(`${e} Broadcasting the up to date copy of the Accountabilities Types Records to the other listeners`),this.bc.postMessage({newValue:o}),this.log.trace(`${e} Sending a message that states that the AccountabilityType record Update was successful`),this.messageService.sendMessage({type:a.C.Success,message:"The AccountabilityType record Update was successful"})}else this.log.error(`${e} Local Cache Update was unsuccessful: AccountabilityType record is missing in the Local Cache`),this.log.trace(`${e} Sending a message that states that the Local Cache Update was unsuccessful`),this.messageService.sendMessage({type:a.C.Error,message:"Accountabilities Types Records Local Cache Update was unsuccessful"})}),(0,p.K)(t=>(this.log.error(`${e} AccountabilityType record Update was unsuccessful: ${t.statusText||"See Server Logs for more details"}`),this.log.trace(`${e} Sending a message that states that the AccountabilityType record Update was unsuccessful`),this.messageService.sendMessage({type:a.C.Error,message:"The AccountabilityType record Update was unsuccessful"}),(0,g._)(t))))}deleteAccountabilityType(s){return this.log.trace(`${e} Entering deleteAccountabilityType()`),this.log.debug(`${e} AccountabilityType Id = ${s}`),this.log.debug(`${e} Making a HTTP DELETE Request to ${n.N.accountabilitiesTypesBaseUrl}/${r}/ids/${s} to delete the record`),this.http.delete(`${n.N.accountabilitiesTypesBaseUrl}/${r}/ids/${s}`,{headers:new h.WM(y)}).pipe((0,d.b)(t=>{if(1==t){this.log.trace(`${e} AccountabilityType record Deletion was successful`),this.log.trace(`${e} Searching for the deleted AccountabilityType record in the Local Cache`);let i=this._cache.accountabilitiesTypes.findIndex(o=>o.id==s);if(this.log.debug(`${e} Deleted AccountabilityType record Index = ${i}`),-1!=i){this.log.trace(`${e} Removing the deleted AccountabilityType record from the Local Cache`),this._cache.accountabilitiesTypes.splice(i,1),this.log.trace(`${e} Creating an up to date copy of the Accountabilities Types Records`);const o=Object.assign({},this._cache).accountabilitiesTypes;this.log.trace(`${e} Broadcasting the up to date copy of the Accountabilities Types Records to the current listener`),this._accountabilitiesTypesSubject$.next(o),this.log.trace(`${e} Broadcasting the up to date copy of the Accountabilities Types Records to the other listeners`),this.bc.postMessage({newValue:o}),this.log.trace(`${e} Sending a message that states that the AccountabilityType record Deletion was successful`),this.messageService.sendMessage({type:a.C.Success,message:"The AccountabilityType record Deletion was successful"})}else this.log.error(`${e} Local Cache Update was unsuccessful: AccountabilityType record is missing in the Local Cache`),this.log.trace(`${e} Sending a message that states that the Local Cache Update was unsuccessful`),this.messageService.sendMessage({type:a.C.Error,message:"Accountabilities Types Records Local Cache Update was unsuccessful"})}else this.log.error(`${e} AccountabilityType record Deletion was unsuccessful: Expecting 1 record to be deleted instead of ${t}`),this.log.trace(`${e} Sending a message that states that the AccountabilityType record Deletion was unsuccessful`),this.messageService.sendMessage({type:a.C.Error,message:"The AccountabilityType record Deletion was unsuccessful"})}),(0,p.K)(t=>(this.log.error(`${e} AccountabilityType record Deletion was unsuccessful: ${t.statusText||"See Server Logs for more details"}`),this.log.trace(`${e} Sending a message that states that the AccountabilityType record Deletion was unsuccessful`),this.messageService.sendMessage({type:a.C.Error,message:"The AccountabilityType record Deletion was unsuccessful"}),(0,g._)(t))))}get records(){return this._accountabilitiesTypesSubject$.value}}return u.\u0275fac=function(s){return new(s||u)(l.LFG(h.eN),l.LFG(T.qZ),l.LFG(T.ez),l.LFG(l.R0b),l.LFG(E.Kf))},u.\u0275prov=l.Yz7({token:u,factory:u.\u0275fac,providedIn:"root"}),u})()}}]);